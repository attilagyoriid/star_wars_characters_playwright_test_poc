import { useState, useEffect } from "react";
import axios from "axios";
import Head from "next/head";
import Image from "next/image"; // Import Image component
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/pages/Home.module.scss";
import CharacterDropdown from "@/components/CharacterDropdown";
import CharacterCard from "@/components/CharacterCard";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

interface Character {
  name: string;
  height: string;
  mass: string;
  hair_color: string;
  skin_color: string;
  eye_color: string;
  birth_year: string;
  gender: string;
  image?: string; // Add image property
}

interface CharacterImages {
  [key: string]: string;
}

export default function Home() {
  const [characters, setCharacters] = useState<Character[]>([]);
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(
    null
  );
  const [showImage, setShowImage] = useState(false); // Add state for showing image
  const [characterImages, setCharacterImages] = useState<CharacterImages>({});

  useEffect(() => {
    axios
      .get("https://swapi.dev/api/people/")
      .then((response) => setCharacters(response.data.results))
      .catch((error) => console.error("Error fetching data:", error));

    // Load local character images mapping
    axios
      .get("/characterImages.json")
      .then((response) => setCharacterImages(response.data))
      .catch((error) => console.error("Error loading character images:", error));
  }, []);

  const handleCharacterChange = (
    event: React.ChangeEvent<HTMLSelectElement>
  ) => {
    const character =
      characters.find((char) => char.name === event.target.value) || null;
    setSelectedCharacter(character);
    setShowImage(false); // Reset showImage state
  };

  const handleShowImageClick = () => {
    setShowImage(true);
  };

  const getImageSrc = (characterName: string) => {
    return characterImages[characterName] || null;
  };

  return (
    <>
      <Head>
        <title>Star Wars Characters</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.container} ${geistSans.variable} ${geistMono.variable}`}
      >
        <main className={styles.main}>
          <h1>Star Wars Characters</h1>
          <CharacterDropdown
            characters={characters}
            onChange={handleCharacterChange}
          />
          {selectedCharacter ? (
            <>
              <div className={styles.characterDetails}>
                <div className={styles.characterInfo}>
                  <CharacterCard character={selectedCharacter} />
                </div>
                <div className={styles.characterImageContainer}>
                  {showImage && (
                    getImageSrc(selectedCharacter.name) ? (
                      <Image
                        src={getImageSrc(selectedCharacter.name)}
                        alt={selectedCharacter.name}
                        width={200}
                        height={200}
                        className={styles.characterImage}
                      />
                    ) : (
                      <p className={styles.noImage}>No Image Available</p>
                    )
                  )}
                </div>
              </div>
              <button onClick={handleShowImageClick}>Show Image</button>
            </>
          ) : (
            <p>Select a character</p>
          )}
        </main>
      </div>
    </>
  );
}